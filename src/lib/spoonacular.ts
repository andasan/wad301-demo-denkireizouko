import * as recipes from "@andasan/spoonacular-api-clients";

import type { SearchRecipeType } from "@/types";

const authConfig: recipes.AuthMethodsConfiguration = {
  apiKeyScheme: process.env.SPOONACULAR_API_KEY,
};
const configurationParameters = {
  baseServer: recipes.servers[0],
  authMethods: authConfig,
};
const config = recipes.createConfiguration(configurationParameters);
export const client = new recipes.RecipesApi(config);

export const getRecipes = async ({
  query,
  cuisine,
  excludeCuisine,
  diet,
  intolerances,
  equipment,
  includeIngredients,
  excludeIngredients,
  type,
  instructionsRequired,
  fillIngredients,
  addRecipeInformation,
  addRecipeNutrition,
  author,
  tags,
  recipeBoxId,
  titleMatch,
  maxReadyTime,
  ignorePantry,
  sort,
  sortDirection,
  minCarbs,
  maxCarbs,
  minProtein,
  maxProtein,
  minCalories,
  maxCalories,
  minFat,
  maxFat,
  minAlcohol,
  maxAlcohol,
  minCaffeine,
  maxCaffeine,
  minCopper,
  maxCopper,
  minCalcium,
  maxCalcium,
  minCholine,
  maxCholine,
  minCholesterol,
  maxCholesterol,
  minFluoride,
  maxFluoride,
  minSaturatedFat,
  maxSaturatedFat,
  minVitaminA,
  maxVitaminA,
  minVitaminC,
  maxVitaminC,
  minVitaminD,
  maxVitaminD,
  minVitaminE,
  maxVitaminE,
  minVitaminK,
  maxVitaminK,
  minVitaminB1,
  maxVitaminB1,
  minVitaminB2,
  maxVitaminB2,
  minVitaminB5,
  maxVitaminB5,
  minVitaminB3,
  maxVitaminB3,
  minVitaminB6,
  maxVitaminB6,
  minVitaminB12,
  maxVitaminB12,
  minFiber,
  maxFiber,
  minFolate,
  maxFolate,
  minFolicAcid,
  maxFolicAcid,
  minIodine,
  maxIodine,
  minIron,
  maxIron,
  minMagnesium,
  maxMagnesium,
  minManganese,
  maxManganese,
  minPhosphorus,
  maxPhosphorus,
  minPotassium,
  maxPotassium,
  minSelenium,
  maxSelenium,
  minSodium,
  maxSodium,
  minSugar,
  maxSugar,
  minZinc,
  maxZinc,
  offset,
  number,
}: SearchRecipeType) => {
  const response = await client.searchRecipes(
    query,
    cuisine,
    excludeCuisine,
    diet,
    intolerances,
    equipment,
    includeIngredients,
    excludeIngredients,
    type,
    instructionsRequired,
    fillIngredients,
    addRecipeInformation,
    addRecipeNutrition,
    author,
    tags,
    recipeBoxId,
    titleMatch,
    maxReadyTime,
    ignorePantry,
    sort,
    sortDirection,
    minCarbs,
    maxCarbs,
    minProtein,
    maxProtein,
    minCalories,
    maxCalories,
    minFat,
    maxFat,
    minAlcohol,
    maxAlcohol,
    minCaffeine,
    maxCaffeine,
    minCopper,
    maxCopper,
    minCalcium,
    maxCalcium,
    minCholine,
    maxCholine,
    minCholesterol,
    maxCholesterol,
    minFluoride,
    maxFluoride,
    minSaturatedFat,
    maxSaturatedFat,
    minVitaminA,
    maxVitaminA,
    minVitaminC,
    maxVitaminC,
    minVitaminD,
    maxVitaminD,
    minVitaminE,
    maxVitaminE,
    minVitaminK,
    maxVitaminK,
    minVitaminB1,
    maxVitaminB1,
    minVitaminB2,
    maxVitaminB2,
    minVitaminB5,
    maxVitaminB5,
    minVitaminB3,
    maxVitaminB3,
    minVitaminB6,
    maxVitaminB6,
    minVitaminB12,
    maxVitaminB12,
    minFiber,
    maxFiber,
    minFolate,
    maxFolate,
    minFolicAcid,
    maxFolicAcid,
    minIodine,
    maxIodine,
    minIron,
    maxIron,
    minMagnesium,
    maxMagnesium,
    minManganese,
    maxManganese,
    minPhosphorus,
    maxPhosphorus,
    minPotassium,
    maxPotassium,
    minSelenium,
    maxSelenium,
    minSodium,
    maxSodium,
    minSugar,
    maxSugar,
    minZinc,
    maxZinc,
    offset,
    number,
  );
  return response;
};

export const getManyRecipes = async (ids: number[]) => {
  const stringIds = ids.join(",");
  return await client.getRecipeInformationBulk(stringIds);
};

export const getRecipe = async (id: number) => {
  return await client.getRecipeInformation(id);
};
